/***************************************************************************
  cadsurfdoc.h  -  description
  -------------------
begin                : Mon Feb 17 13:05:59 IST 2003
copyright            : (C) 2003 by Sharjith
email                : sharjith_ssn@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef CADSURFDOC_H
#define CADSURFDOC_H

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif 

// include files for QT
#include <qobject.h>
#include <qstring.h>
#include <qlist.h>

//Geometry
#include "Geometry.h"
#include "GeomException.h"
#include "Point3D.h"
#include "Vector3D.h"
#include "OneAxis.h"
#include "AxisSystem.h"
#include "Line3D.h"
#include "Circle3D.h"
#include "Ellipse3D.h"
#include "Hyperbola3D.h"
#include "Parabola3D.h"
#include "BezierCurve.h"
#include "BSplineCurve.h"
#include "Plane.h"
#include "Cone.h"
#include "Cylinder.h"
#include "Sphere.h"
#include "Torus.h"
#include "ExtrudedSurface.h"
#include "RevolvedSurface.h"
#include "RuledSurface.h"
#include "PipeSurface.h"

#include "MMath.h"
//Graphics
#include "GLObject.h"
#include "GLOneAxis.h"
#include "GLAxisSystem.h"
#include "GLPoint.h"
#include "GLPlane.h"
#include "GLCurve.h"
#include "GLSurface.h"
#include "GLTrihedron.h"
//#include "GLFont.h"
#include "BoundingBox.h"

//Display Context
#include "GLDisplayContext.h"

// forward declaration of the CadSurf classes
class CadSurfView;
class CGLDisplayContext;

/**	CadSurfDoc provides a document object for a document-view model.
 *
 * The CadSurfDoc class provides a document object that can be used in conjunction with the classes
 * CadSurfApp and CadSurfView to create a document-view model for MDI (Multiple Document Interface)
 * Qt 2.1 applications based on QApplication and QMainWindow as main classes and QWorkspace as MDI manager widget.
 * Thereby, the document object is created by the CadSurfApp instance (and kept in a document list) and contains
 * the document structure with the according methods for manipulating the document
 * data by CadSurfView objects. Also, CadSurfDoc contains the methods for serialization of the document data
 * from and to files.
 * @author Source Framework Automatically Generated by KDevelop, (c) The KDevelop Team. 	
 * @version KDevelop version 1.1 code generation
 */
class CadSurfDoc : public QObject
{
    Q_OBJECT

	friend class CadSurfView;

    public:
    /** Constructor for the fileclass of the application */
    CadSurfDoc();
    /** Destructor for the fileclass of the application */
    ~CadSurfDoc();

    CGLDisplayContext* GetDisplayContext() const { return dContext; }
    /** adds a view to the document which represents the document contents. Usually this is your main view. */
    void addView(CadSurfView *view);
    /** removes a view from the list of currently connected views */
    void removeView(CadSurfView *view);
    /** gets called if a view is removed or added */
    void changedViewList();
    /** returns the first view instance */
    CadSurfView* firstView(){ return pViewList->first(); };
    /** returns true, if the requested view is the last view of the document */
    bool isLastView();
    /** This method gets called when the user is about to close a frame window. It checks, if more than one view
     * is connected to the document (then the frame can be closed), if pFrame is the last view and the document is
     * modified, the user gets asked if he wants to save the document.
     */
    bool canCloseFrame(CadSurfView* pFrame);
    /** sets the modified flag for the document after a modifying action on the view connected to the document.*/
    void setModified(bool _m=true){ modified=_m; };
    /** returns if the document is modified or not. Use this to determine if your document needs saving by the user on closing.*/
    bool isModified(){ return modified; };
    /** deletes the document's contents */
    void deleteContents();
    /** initializes the document generally */
    bool newDocument();
    /** closes the acutal document */
    void closeDocument();
    /** loads the document by filename and format and emits the updateViews() signal */
    bool openDocument(const QString &filename, const char *format=0);
    /** saves the document under filename and format.*/	
    bool saveDocument(const QString &filename, const char *format=0);
    /** sets the path to the file connected with the document */
    void setPathName(const QString &name);
    /** returns the pathname of the current document file*/
    const QString& pathName() const;

    /** sets the filename of the document */
    void setTitle(const QString &title);
    /** returns the title of the document */
    const QString& title() const;

    public slots:
	/** calls repaint() on all views connected to the document object and is called by the view by which the document has been changed.
	 * As this view normally repaints itself, it is excluded from the paintEvent.
	 */
	void updateAllViews(CadSurfView *sender);
    void update();

    private:
    /** the modified flag of the current document */
    bool modified;
    QString m_title;
    QString m_filename;
    /** the list of the views currently connected to the document */
    QList<CadSurfView> *pViewList;	

    public:
    void OnPoints();
    void OnLines();
    void OnCircles();
    void OnEllipse();
    void OnParabola();
    void OnHyperbola();
    void OnBezier();
    void OnBspline();
    void OnPlane();
    void OnCylinder();
    void OnCone();
    void OnSphere();
    void OnTorus();
    void OnExtsurf();
    void OnRevsurf();
    void OnRuledsurf();
    void OnPipe();
    void OnUserSurface();
    void OnTranslate();
    void OnRotate();
    void OnScale();
    void OnReflect();
    public:
    CGLDisplayContext* dContext;

};

#endif // CADSURFDOC_H
