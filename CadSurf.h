/***************************************************************************
  cadsurf.h  -  description
  -------------------
begin                : Mon Feb 17 13:05:59 IST 2003
copyright            : (C) 2003 by Sharjith
email                : sharjith_ssn@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef CADSURF_H
#define CADSURF_H

// include files for QT
#include <qapp.h>
#include <qmainwindow.h>
#include <qaction.h>
#include <qworkspace.h>
#include <qmenubar.h>
#include <qtoolbar.h>
#include <qstatusbar.h>
#include <qwhatsthis.h>
#include <qpopupmenu.h>
#include <qaccel.h>
#include <qtoolbutton.h>
#include <qmsgbox.h>
#include <qfiledialog.h>
#include <qprinter.h>
#include <qstring.h>
#include <qpixmap.h>
#include <qhbox.h>
#include <qcolordialog.h>

#include "GLDisplayContext.h"

// forward declaration of the CadSurf classes
class CadSurfDoc;
class CadSurfView;

/**
 * This Class is the base class for your application. It sets up the main
 * window and providing a menubar, toolbar
 * and statusbar. For the main view, an instance of class CadSurfView is
 * created which creates your view.
 * 	
 * @author Source Framework Automatically Generated by KDevelop, (c) The KDevelop Team.
 * @version KDevelop version 1.3 code generation
 */
class CadSurfApp : public QMainWindow
{
    Q_OBJECT

    public:
	/** construtor */
	CadSurfApp();
	/** destructor */
	~CadSurfApp();

	/** opens a file specified by commandline option
	*/
	void openDocumentFile(const char *file=0);

	QHBox* hb;
	QLabel *cViewer;
	QLabel *tViewer;

    protected:
	/** overloaded for Message box on last window exit */
	bool queryExit();
	/** event filter to catch close events for MDI child windows and is installed in createClient() on every child window.
	 * Closing a window calls the eventFilter first which removes the view from the connected documents' view list. If the
	 * last view is going to be closed, the eventFilter() tests if the document is modified; if yes, it asks the user to
	 * save the document. If the document title contains "Untitled", slotFileSaveAs() gets called to get a save name and path.
	 */
	virtual bool eventFilter(QObject* object, QEvent* event);
	/** creates a new child window. The document that will be connected to it
	 * has to be created before and the instances filled, with e.g. openDocument().
	 * Then call createClient() to get a new MDI child window.
	 * @see CadSurfDoc#addView
	 * @see CadSurfDoc#openDocument
	 * @param doc pointer to the document instance that the view will
	 * be connected to.
	 */
	void createClient(CadSurfDoc* doc);

	private slots:

	    /** generate a new document in the actual view */
	    void slotFileNew();
	/** open a document */
	void slotFileOpen();
	/** save a document */
	void slotFileSave();
	/** save a document under a different filename*/
	void slotFileSaveAs();
	/** close the actual file */
	void slotFileClose();
	/** print the actual file */
	void slotFilePrint();
	/** exits the application */
	void slotFileQuit();

	void slotEditDeleteAll();
	void slotEditDeleteSelected();
	/** reverts the last editing action */
	void slotEditUndo();
	/** put the marked text/object into the clipboard and remove
	 * it from the document */
	void slotEditCut();
	/** put the marked text/object into the clipboard*/
	void slotEditCopy();
	/** paste the clipboard into the document*/
	void slotEditPaste();

	void slotViewDisplayAll();
	void slotViewDisplaySelected();
	void slotViewEraseAll();
	void slotViewEraseSelected();
	/** toggle the toolbar*/
	void slotViewToolBar(bool toggle);
	/** toggle the statusbar*/
	void slotViewStatusBar(bool toggle);

	//display mode
	void slotSetShaded();
	void slotSetWireframe();
	//grid
	void slotToggleGrid();
	void slotGridPara();
	//color and material
	void slotSetColor();
	void slotSetMaterial();
	//background color
	void slotBackColor();
	//line style
	void slotLineSolid();
	void slotLineDashed();
	void slotLineDotted();
	void slotLineDotDashed();

	/** creates a new view for the current document */
	void slotWindowNewWindow();
	/** shows an about dlg*/
	void slotHelpAbout();
	/** change the status message of the whole statusbar temporary */
	void slotStatusHelpMsg(const QString &text);
	/** gets called when the window menu is activated; recreates the window menu with all opened window titles. */
	void windowMenuAboutToShow();
	/** activates the MDI child widget when it gets selected from the window menu. */
	void windowMenuActivated( int id );

	//viewer slots
	void slotTopView();
	void slotBottomView();
	void slotFrontView();
	void slotBackView();
	void slotLeftView();
	void slotRightView();
	void slotAxoView();
	void slotFitall();
	void slotZoomwin();
	void slotReset();
	void slotDmode();
	void slotHLR();
	void slotAntial();

	//object slots
	void slotmkPoint();
	void slotmkLine();
	void slotmkCircle();
	void slotmkEllipse();
	void slotmkParabola();
	void slotmkHyperbola();
	void slotmkBezier();
	void slotmkBSpline();

	void slotmkPlane();
	void slotmkCylinder();
	void slotmkCone();
	void slotmkSphere();
	void slotmkTorus();
	void slotmkExtruded();
	void slotmkRevolved();
	void slotmkRuled();
	void slotmkPipe();
	void slotmkUserSurf();

	void slotmkTranslate();
	void slotmkRotate();
	void slotmkScale();
	void slotmkReflect();

    private:

	/** initializes all QActions of the application */
	void initActions();
	/** initMenuBar creates the menu_bar and inserts the menuitems */
	void initMenuBar();
	/** this creates the toolbars. Change the toobar look and add new toolbars in this
	 * function */
	void initToolBar();
	/** setup the statusbar */
	void initStatusBar();
	/** setup the mainview*/
	void initView();

	/** file_menu contains all items of the menubar entry "File" */
	QPopupMenu *pFileMenu;
	/** edit_menu contains all items of the menubar entry "Edit" */
	QPopupMenu *pEditMenu;
	/** view_menu contains all items of the menubar entry "View" */
	QPopupMenu *pViewMenu;
	/** view_menu contains all items of the menubar entry "Help" */
	QPopupMenu *pHelpMenu;

	/** the Preferences Menu */
	QPopupMenu *pPreferenceMenu;
	//sub menus
	QPopupMenu *pDisplayMenu;

	QPopupMenu *pGridMenu;
	QPopupMenu *pLineStyleMenu;

	/** the window menu */
	QPopupMenu *pWindowMenu;

	QToolBar *fileToolbar;
	QToolBar *viewToolbar;
	QToolBar *objToolbar;

	/** pWorkspace is the MDI frame widget that handles MDI child widgets. Inititalized in
	 * initView()
	 */
	QWorkspace *pWorkspace;
	/** the printer instance */
	QPrinter *printer;
	/** a counter that gets increased each time the user creates a new document with "File"->"New" */
	int untitledCount;
	/** a list of all open documents. If the last window of a document gets closed, the installed eventFilter
	 * removes this document from the list. The document list is checked for modified documents when the user
	 * is about to close the application. */
	QList<CadSurfDoc> *pDocList;

	QAction *fileNew;
	QAction *fileOpen;
	QAction *fileSave;
	QAction *fileSaveAs;
	QAction *fileClose;
	QAction *filePrint;
	QAction *fileQuit;

	QAction *editDeleteAll;
	QAction *editDeleteSelected;
	QAction *editUndo;
	QAction *editCut;
	QAction *editCopy;
	QAction *editPaste;

	QAction *viewDisplayAll;
	QAction *viewDisplaySelected;
	QAction *viewEraseAll;
	QAction *viewEraseSelected;
	QAction *viewToolBar;
	QAction *viewStatusBar;

	QAction *Shaded;
	QAction *Wireframe;
	QAction *pColor;
	QAction *pMaterial;
	QAction *gridToggle;
	QAction *gridPara;
	QAction *lineSolid;
	QAction *lineDashed;
	QAction *lineDotted;
	QAction *lineDotDashed;
	QAction *backColor;

	QActionGroup *windowAction;
	QAction *windowNewWindow;
	QAction *windowTile;
	QAction *windowCascade;

	QAction *helpAboutApp;

	//Viewer Actions;
	QAction *viewTop;
	QAction *viewBottom;
	QAction *viewFront;
	QAction *viewBack;
	QAction *viewLeft;
	QAction *viewRight;
	QAction *viewAxo;
	QAction *viewFitall;
	QAction *viewZoomwin;
	QAction *viewReset;
	QAction *viewDmode;
	QAction *viewHLR;
	QAction *viewAntial;

	//object actions
	QAction *mkPoint;
	QAction *mkLine;
	QAction *mkCircle;
	QAction *mkEllipse;
	QAction *mkParabola;
	QAction *mkHyperbola;
	QAction *mkBezier;
	QAction *mkBSpline;

	QAction *mkPlane;
	QAction *mkCylinder;
	QAction *mkCone;
	QAction *mkSphere;
	QAction *mkTorus;
	QAction *mkExtruded;
	QAction *mkRevolved;
	QAction *mkRuled;
	QAction *mkPipe;
	QAction *mkUserSurf;

	QAction *mkTranslate;
	QAction *mkRotate;
	QAction *mkScale;
	QAction *mkReflect;

};
#endif


